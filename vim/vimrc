" don't bother with vi compatibility
set nocompatible

" enable syntax highlighting
syntax enable

" configure Vundle
filetype on " without this vim emits a zero exit status, later, because of :ft off
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" install Vundle bundles
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
  source ~/.vimrc.bundles.local
endif

call vundle#end()

" ensure ftdetect et al work by including this after the Vundle stuff
filetype plugin indent on

set ic
set re=1
set autoindent
set autoread                                                 " reload files when changed on disk, i.e. via `git checkout`
set backspace=2                                              " Fix broken backspace in some setups
set backupcopy=yes                                           " see :help crontab
set clipboard=unnamed                                        " yank and paste with the system clipboard
set directory-=.                                             " don't store swapfiles in the current directory
set encoding=utf-8
set expandtab                                                " expand tabs to spaces
set ignorecase                                               " case-insensitive search
set incsearch                                                " search as you type
set laststatus=2                                             " always show statusline
set list                                                     " show trailing whitespace
set listchars=tab:▸\ ,trail:▫
set number                                                   " show line numbers
set ruler                                                    " show where you are
set scrolloff=3                                              " show context above/below cursorline
set shiftwidth=2                                             " normal mode indentation commands use 2 spaces
set showcmd
set smartcase                                                " case-sensitive search if any caps
set softtabstop=2                                            " insert mode tab and backspace use 2 spaces
set tabstop=8                                                " actual tabs occupy 8 characters
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu                                                 " show a navigable menu for tab completion
set wildmode=longest,list,full

" Show count of search results [x/y] at the bottom of the screen
set shortmess-=S

" Enable faster switch to NORMAL mode
set timeoutlen=1000 ttimeoutlen=10

" Turning on Hybrid line numbers
" https://jeffkreeftmeijer.com/vim-number/
set number relativenumber

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Langmap to allow using Russian symbols in command mode
set langmap=ёйцукенгшщзхъфывапролджэячсмитьбюЁЙЦУКЕHГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ;`qwertyuiop[]asdfghjkl\\;'zxcvbnm\\,.~QWERTYUIOP{}ASDFGHJKL:\\"ZXCVBNM<>

" Spell checking for English and Russian
" Dictionaries http://ftp.vim.org/vim/runtime/spell/
" Location ~/.vim/spell
setlocal spell spelllang=en_us,ru_ru

" OpenSSL symmetric encryption/decryption of *.enc files
augroup enc
autocmd!
autocmd  BufReadPre,FileReadPre     *.enc set binary
autocmd  BufReadPre,FileReadPre     *.enc set history=0 cmdheight=3 viminfo=
autocmd  BufReadPre,FileReadPre     *.enc set noswapfile nowritebackup
"
autocmd  BufReadPost,FileReadPost   *.enc set shell=/bin/sh shellredir=>
autocmd  BufReadPost,FileReadPost   *.enc '[,']!openssl aes-256-cbc -d -salt
autocmd  BufReadPost,FileReadPost   *.enc set nobinary cmdheight& shell&
autocmd  BufReadPost,FileReadPost   *.enc let b:encflag=1
autocmd  BufReadPost,FileReadPost   *.enc exe "doau BufReadPost ".expand("%:r")
autocmd  BufReadPost,FileReadPost   *.enc redraw!
"
autocmd  BufWritePre,FileWritePre   *.enc mark z
autocmd  BufWritePre,FileWritePre   *.enc set binary cmdheight=3 shell=/bin/sh
autocmd  BufWritePre,FileWritePre   *.enc '[,']!openssl aes-256-cbc -salt
"
autocmd  BufWritePost,FileWritePost *.enc undo
autocmd  BufWritePost,FileWritePost *.enc set nobinary cmdheight& shell&
autocmd  BufWritePost,FileWritePost *.enc 'z
augroup END

" OpenSSL hybrid encryption/decryption of *.amenc files
augroup amenc
autocmd!
autocmd  BufReadPre,FileReadPre     *.amenc set binary
autocmd  BufReadPre,FileReadPre     *.amenc set history=0 cmdheight=3 viminfo=
autocmd  BufReadPre,FileReadPre     *.amenc set noswapfile nowritebackup
"
autocmd  BufReadPost,FileReadPost   *.amenc set shell=/bin/sh shellredir=>
autocmd  BufReadPost,FileReadPost   *.amenc '[,']!openssl smime -decrypt -binary -inform DER -inkey ~/.keys/my-private.pem
autocmd  BufReadPost,FileReadPost   *.amenc set nobinary cmdheight& shell&
autocmd  BufReadPost,FileReadPost   *.amenc let b:encflag=1
autocmd  BufReadPost,FileReadPost   *.amenc exe "doau BufReadPost ".expand("%:r")
autocmd  BufReadPost,FileReadPost   *.amenc redraw!
"
autocmd  BufWritePre,FileWritePre   *.amenc mark z
autocmd  BufWritePre,FileWritePre   *.amenc set binary cmdheight=3 shell=/bin/sh
autocmd  BufWritePre,FileWritePre   *.amenc '[,']!openssl smime -encrypt -binary -aes-256-cbc -outform DER ~/.keys/my-certificate.pem
"
autocmd  BufWritePost,FileWritePost *.amenc undo
autocmd  BufWritePost,FileWritePost *.amenc set nobinary cmdheight& shell&
autocmd  BufWritePost,FileWritePost *.amenc 'z
augroup END

" Enable basic mouse behavior such as resizing buffers.
set mouse=a
if exists('$TMUX')  " Support resizing in tmux
  set ttymouse=xterm2
endif

" keyboard shortcuts
let mapleader = ','
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <leader>l :Align
nnoremap <leader>a :Ag<space>
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>f :NERDTreeToggle<CR>
" nnoremap <leader>f :NERDTreeFind<CR>
nnoremap <leader>t :CtrlPMRU<CR>
nnoremap <leader>T :CtrlPClearCache<CR>:CtrlP<CR>
nnoremap <leader>] :TagbarToggle<CR>
nnoremap <leader><space> :call whitespace#strip_trailing()<CR>
nnoremap <leader>g :GitGutterToggle<CR>

" Remapping keys to use black hole register on deleting
nnoremap d "_d
nnoremap D "_D
vnoremap d "_d
xnoremap p "_dP
xnoremap P "_dP

" Use ,d and ,D for cut
nnoremap <leader>d "*d
nnoremap <leader>D "*D
vnoremap <leader>d "*d

" nnoremap <leader>p "_dP
" nnoremap <leader>x "_x
noremap <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" Unmap C-a, since it's interferring with remote tmux modifier
map <silent> <c-a> :exe ""<CR>

" in case you forgot to sudo
cnoremap w!! %!sudo tee > /dev/null %

" plugin settings
let g:ctrlp_match_window = 'order:ttb,max:20'
let g:NERDSpaceDelims=1
let g:gitgutter_enabled = 0

" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use Ag over Grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" fdoc is yaml
autocmd BufRead,BufNewFile *.fdoc set filetype=yaml
" md is markdown
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd BufRead,BufNewFile *.md set spell
" extra rails.vim help
autocmd User Rails silent! Rnavcommand decorator      app/decorators            -glob=**/* -suffix=_decorator.rb
autocmd User Rails silent! Rnavcommand observer       app/observers             -glob=**/* -suffix=_observer.rb
autocmd User Rails silent! Rnavcommand feature        features                  -glob=**/* -suffix=.feature
autocmd User Rails silent! Rnavcommand job            app/jobs                  -glob=**/* -suffix=_job.rb
autocmd User Rails silent! Rnavcommand mediator       app/mediators             -glob=**/* -suffix=_mediator.rb
autocmd User Rails silent! Rnavcommand stepdefinition features/step_definitions -glob=**/* -suffix=_steps.rb
" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Fix Cursor in TMUX
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Don't copy the contents of an overwritten selection.
vnoremap p "_dP

" Go crazy!
if filereadable(expand("~/.vimrc.local"))
  " In your .vimrc.local, you might like:
  "
  " set autowrite
  " set nocursorline
  " set nowritebackup
  " set whichwrap+=<,>,h,l,[,] " Wrap arrow keys between lines
  "
  " autocmd! bufwritepost .vimrc source ~/.vimrc
  " noremap! jj <ESC>
  source ~/.vimrc.local
endif

hi Normal guibg=NONE ctermbg=NONE

let g:snipMate = { 'snippet_version' : 1 }
